---
import { LOCALES, type Lang, getLocalePaths, useTranslations } from "@/i18n";
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"label"> {
	variant?: "text" | "flags";
	width?: string;
}

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
const DEFAULT_FLAG = "openmoji:flag-united-nations";

const { variant = "text", width, ...attrs } = Astro.props;
const isTextVariant = variant === "text";

const paths = getLocalePaths(Astro.url);
const pathsData = JSON.stringify(paths);

const currentLocale = {
	lang,
	label: LOCALES[lang].label,
	flag: LOCALES[lang].flag || DEFAULT_FLAG,
};

const localesData = JSON.stringify(LOCALES);
---

<locale-select
  data-variant={variant}
  data-width={width}
  data-current-locale={JSON.stringify(currentLocale)}
  data-paths={pathsData}
  data-locales={localesData}
  class={`inline-flex items-center relative ${attrs.class}`}
  {...attrs}
>
  <label
    class={`relative inline-flex items-center w-full`}
    style={width ? `--select-width: ${width}` : `--select-width: ${isTextVariant ? '8rem' : '6rem'}`}
  >
    <span class="sr-only">{t('select.language')}</span>
    {isTextVariant && (
      <Icon
        name="tabler:language"
        class="absolute text-foreground-light dark:text-foreground-dark text-sm left-2 top-1/2 transform -translate-y-1/2 pointer-events-none z-10"
      />
    )}

    <select
      class={`appearance-none bg-transparent border-0 cursor-pointer text-foreground-light dark:text-foreground-dark outline-none focus:ring-0 focus:text-foreground-light dark:focus:text-foreground-dark py-2 pr-8 w-[var(--select-width)] truncate ${
        isTextVariant ? 'pl-8' : 'pl-7 text-foreground-light dark:text-foreground-dark'
      }`}
    >
      {paths.map(({ path, lang: localeLang }) => (
        <option
          value={path}
          selected={localeLang === lang}
          data-lang={localeLang}
          class="bg-bg-light dark:bg-bg-dark text-foreground-light dark:text-foreground-dark"
        >
          {LOCALES[localeLang].label}
        </option>
      ))}
    </select>

    {isTextVariant ? (
      <Icon
        name="tabler:chevron-down"
        class="absolute text-foreground-light dark:text-foreground-dark text-base right-1 top-1/2 transform -translate-y-1/2 pointer-events-none z-10"
      />
    ) : (
      <span class="absolute left-1 top-1/2 transform -translate-y-1/2 pointer-events-none z-10">
        <Icon
          name={currentLocale.flag}
          class="w-5 h-5"
        />
      </span>
    )}

    {!isTextVariant && (
      <Icon
        name="tabler:chevron-down"
        class="absolute text-foreground-light dark:text-foreground-dark text-base right-1 top-1/2 transform -translate-y-1/2 pointer-events-none z-10"
      />
    )}
  </label>
</locale-select>

<script>
  class LocaleSelect extends HTMLElement {
    constructor() {
      super();
      this.setupSelect();
    }

    setupSelect() {
      const select = this.querySelector('select');

      if (!select) return;

      const variant = this.dataset.variant || 'text';
      const currentLocaleData = JSON.parse(this.dataset.currentLocale || '{}');

      select.addEventListener('change', (event) => {
        if (!(event.currentTarget instanceof HTMLSelectElement)) return;

        const selectedOption = event.currentTarget.selectedOptions[0];
        const selectedLang = selectedOption.dataset.lang;

        if (selectedLang) {
          localStorage.selectedLang = selectedLang;
        }

        window.location.pathname = event.currentTarget.value;
      });
    }
  }

  customElements.define('locale-select', LocaleSelect);
</script>
