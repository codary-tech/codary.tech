---
import { type Lang, useTranslations } from "@/i18n";
import { getAppTags } from "@/models/apps/app.service";

interface Props {
	currentLocale: Lang;
}

const { currentLocale } = Astro.props;
const t = useTranslations(currentLocale);

// Get all available tags for the current language
const tags = await getAppTags(currentLocale);
---

<div class="mb-8 bg-bg-light dark:bg-bg-dark rounded-lg shadow-[0_2px_8px_rgba(0,0,0,0.1)] p-4">
  <form id="app-filters" class="space-y-4 md:space-y-0 md:grid md:grid-cols-12 md:gap-4">
    <div class="md:col-span-8">
      <label for="search" class="block text-sm font-medium mb-1 text-main-light dark:text-main-dark">
        {t("apps.search.label")}
      </label>
      <div class="relative">
        <input
          type="text"
          id="search"
          name="search"
          placeholder={t("apps.search.placeholder")}
          class="w-full px-4 py-2 rounded-lg border border-input-border-light dark:border-input-border-dark bg-input-border-light dark:bg-input-border-dark text-main-light dark:text-main-dark focus:outline-none focus:ring-2 focus:ring-input-border--focus-light dark:focus:ring-input-border--focus-dark"
        />
        <button
          type="button"
          id="clear-search"
          class="absolute right-2 top-1/2 -translate-y-1/2 text-secondary-foreground-light dark:text-secondary-foreground-dark hover:text-icons-hover-light dark:hover:text-icons-hover-dark"
          aria-label={t("apps.search.clear")}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>

    <div class="md:col-span-4">
      <label for="filter-tags" class="block text-sm font-medium mb-1 text-main-light dark:text-main-dark">
        {t("apps.filters.tags")}
      </label>
      <select
        id="filter-tags"
        name="tags"
        class="w-full px-4 py-2 rounded-lg border border-input-border-light dark:border-input-border-dark bg-bg-light dark:bg-hero-bg-dark text-main-light dark:text-main-dark focus:outline-none focus:ring-2 focus:ring-input-border--focus-light dark:focus:ring-input-border--focus-dark"
      >
        <option value="">{t("apps.filters.all")}</option>
        {tags.map((tag) => (
          <option value={tag.id}>{tag.title}</option>
        ))}
      </select>
    </div>

    <div class="md:col-span-6 flex items-center mt-4 md:mt-2">
      <label for="show-details" class="flex items-center cursor-pointer">
        <div class="relative">
          <input type="checkbox" id="show-details" class="sr-only">
          <div class="block w-10 h-6 rounded-full bg-input-border-light dark:bg-input-border-dark"></div>
          <div class="dot absolute left-1 top-1 bg-white dark:bg-slate-200 w-4 h-4 rounded-full transition-transform"></div>
        </div>
        <span class="ml-2 text-sm text-main-light dark:text-main-dark">
          {t("apps.filters.showDetails")}
        </span>
      </label>
    </div>

    <div class="md:col-span-6 flex items-center mt-4 md:mt-2">
      <label for="open-source-only" class="flex items-center cursor-pointer">
        <div class="relative">
          <input type="checkbox" id="open-source-only" class="sr-only">
          <div class="block w-10 h-6 rounded-full bg-input-border-light dark:bg-input-border-dark"></div>
          <div class="dot absolute left-1 top-1 bg-white dark:bg-slate-200 w-4 h-4 rounded-full transition-transform"></div>
        </div>
        <span class="ml-2 text-sm text-main-light dark:text-main-dark">
          {t("apps.filters.openSourceOnly")}
        </span>
      </label>
    </div>
  </form>
</div>

<style>
  input:checked ~ .dot {
    transform: translateX(100%);
  }
  input:checked ~ .block {
    background-color: var(--color-accent-green-light);
  }
  .dark input:checked ~ .block {
    background-color: var(--color-accent-green-dark);
  }
</style>

<script>
  // Add client-side filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search') as HTMLInputElement | null;
    const clearButton = document.getElementById('clear-search');
    const tagsSelect = document.getElementById('filter-tags') as HTMLSelectElement | null;
    const showDetailsToggle = document.getElementById('show-details') as HTMLInputElement | null;
    const openSourceOnlyToggle = document.getElementById('open-source-only') as HTMLInputElement | null;

    // Clear search input
    clearButton?.addEventListener('click', () => {
      if (searchInput) {
        searchInput.value = '';
        searchInput.dispatchEvent(new Event('input'));
      }
    });

    // Apply filters when inputs change
    const applyFilters = () => {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedTag = tagsSelect?.value || '';
      const showDetails = showDetailsToggle?.checked || false;
      const openSourceOnly = openSourceOnlyToggle?.checked || false;

      // Dispatch custom event for the AppGrid to handle
      window.dispatchEvent(new CustomEvent('app-filter-change', {
        detail: {
          searchTerm,
          selectedTag,
          showDetails,
          openSourceOnly
        }
      }));
    };

    // Add event listeners
    searchInput?.addEventListener('input', applyFilters);
    tagsSelect?.addEventListener('change', applyFilters);
    showDetailsToggle?.addEventListener('change', applyFilters);
    openSourceOnlyToggle?.addEventListener('change', applyFilters);
  });
</script>
