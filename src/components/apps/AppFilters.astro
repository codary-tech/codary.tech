---
import { type Lang, useTranslations } from "@/i18n";
import { getAppTags } from "@/models/apps/app.service";

interface Props {
	currentLocale: Lang;
}

const { currentLocale } = Astro.props;
const t = useTranslations(currentLocale);

// Get all available tags for the current language
const tags = await getAppTags(currentLocale);
---

<div class="mb-8 bg-bg-light dark:bg-bg-dark rounded-lg p-4">
  <form id="app-filters" class="space-y-4 md:space-y-0 md:grid md:grid-cols-12 md:gap-4">
    <div class="md:col-span-6">
      <label for="search" class="block text-sm font-medium mb-1 text-main-light dark:text-main-dark">
        {t("apps.search.label")}
      </label>
      <div class="relative">
        <input
          type="text"
          id="search"
          name="search"
          placeholder={t("apps.search.placeholder")}
          class="w-full px-4 py-2 rounded-lg border border-input-border-light dark:border-input-border-dark bg-input-border-light dark:bg-input-border-dark text-main-light dark:text-main-dark focus:outline-none focus:ring-2 focus:ring-input-border--focus-light dark:focus:ring-input-border--focus-dark"
        />
        <button
          type="button"
          id="clear-search"
          class="absolute right-2 top-1/2 -translate-y-1/2 text-secondary-foreground-light dark:text-secondary-foreground-dark hover:text-icons-hover-light dark:hover:text-icons-hover-dark"
          aria-label={t("apps.search.clear")}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>

    <div class="md:col-span-3">
      <label for="filter-tags" class="block text-sm font-medium mb-1 text-main-light dark:text-main-dark">
        {t("apps.filters.tags")}
      </label>
      <select
        id="filter-tags"
        name="tags"
        class="w-full px-4 py-2 rounded-lg border border-input-border-light dark:border-input-border-dark bg-bg-light dark:bg-hero-bg-dark text-main-light dark:text-main-dark focus:outline-none focus:ring-2 focus:ring-input-border--focus-light dark:focus:ring-input-border--focus-dark"
      >
        <option value="">{t("apps.filters.all")}</option>
        {tags.map((tag) => (
          <option value={tag.id}>{tag.title}</option>
        ))}
      </select>
    </div>

    <div class="md:col-span-3">
      <label for="sort-by" class="block text-sm font-medium mb-1 text-main-light dark:text-main-dark">
        {t("apps.sort.label")}
      </label>
      <select
        id="sort-by"
        name="sort"
        class="w-full px-4 py-2 rounded-lg border border-input-border-light dark:border-input-border-dark bg-bg-light dark:bg-hero-bg-dark text-main-light dark:text-main-dark focus:outline-none focus:ring-2 focus:ring-input-border--focus-light dark:focus:ring-input-border--focus-dark"
      >
        <option value="alphabetical">{t("apps.sort.alphabetical")}</option>
        <option value="stars">{t("apps.sort.stars")}</option>
        <option value="activity">{t("apps.sort.activity")}</option>
        <option value="random">{t("apps.sort.random")}</option>
      </select>
    </div>

		<div class="md:col-span-6 flex items-center mt-4 md:mt-2">
			<label for="show-details" class="inline-flex items-center cursor-pointer">
			<input type="checkbox" id="show-details" class="sr-only peer" aria-checked="false" role="switch">
			<div class="relative w-11 h-6 bg-input-border-light dark:bg-input-border-dark peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-accent-green-light/30 dark:peer-focus:ring-accent-green-dark/30 rounded-full peer peer-checked:bg-accent-green-light dark:peer-checked:bg-accent-green-dark after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white dark:after:bg-slate-200 after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full"></div>
			<span class="ml-2 text-sm text-main-light dark:text-main-dark">
				{t("apps.filters.showDetails")}
			</span>
			</label>
		</div>

		<div class="md:col-span-6 flex items-center mt-4 md:mt-2">
			<label for="open-source-only" class="inline-flex items-center cursor-pointer">
			<input type="checkbox" id="open-source-only" class="sr-only peer" aria-checked="false" role="switch">
			<div class="relative w-11 h-6 bg-input-border-light dark:bg-input-border-dark peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-accent-green-light/30 dark:peer-focus:ring-accent-green-dark/30 rounded-full peer peer-checked:bg-accent-green-light dark:peer-checked:bg-accent-green-dark after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white dark:after:bg-slate-200 after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full"></div>
			<span class="ml-2 text-sm text-main-light dark:text-main-dark">
				{t("apps.filters.openSourceOnly")}
			</span>
			</label>
		</div>
  </form>
</div>

<style>
  input:checked ~ .dot {
    transform: translateX(100%);
  }
  input:checked ~ .block {
    background-color: var(--color-accent-green-light);
  }
  .dark input:checked ~ .block {
    background-color: var(--color-accent-green-dark);
  }
</style>

<script>
  interface FilterParams {
    selectedTag?: string;
    searchTerm?: string;
    showDetails?: boolean;
    openSourceOnly?: boolean;
    sortBy?: string;
  }

  // Función para generar URL con parámetros de filtro
  function updateUrlParams(filterParams: FilterParams) {
    const url = new URL(window.location.href);

		// Eliminar parámetros actuales
		url.searchParams.delete("tag");
		url.searchParams.delete("search");
		url.searchParams.delete("details");
		url.searchParams.delete("opensource");
		url.searchParams.delete("sort");

		// Añadir nuevos parámetros si existen
		if (filterParams.selectedTag) {
			url.searchParams.set("tag", filterParams.selectedTag);
		}

		if (filterParams.searchTerm) {
			url.searchParams.set("search", filterParams.searchTerm);
		}

		if (filterParams.showDetails) {
			url.searchParams.set("details", "true");
		}

		if (filterParams.openSourceOnly) {
			url.searchParams.set("opensource", "true");
		}

    if (filterParams.sortBy) {
			url.searchParams.set("sort", filterParams.sortBy);
		}

		// Actualizar URL sin recargar la página
		window.history.pushState({}, "", url.toString());
	}

  // Add client-side filter functionality
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search") as HTMLInputElement | null;
    const clearButton = document.getElementById("clear-search");
    const tagsSelect = document.getElementById("filter-tags") as HTMLSelectElement | null;
    const showDetailsToggle = document.getElementById("show-details") as HTMLInputElement | null;
    const openSourceOnlyToggle = document.getElementById("open-source-only") as HTMLInputElement | null;
    const sortSelect = document.getElementById("sort-by") as HTMLSelectElement | null;

    // Clear search input
    clearButton?.addEventListener("click", () => {
      if (searchInput) {
        searchInput.value = "";
        searchInput.dispatchEvent(new Event("input"));
      }
    });

    // Apply filters when inputs change
    const applyFilters = () => {
      const searchTerm = searchInput?.value.toLowerCase() || "";
      const selectedTag = tagsSelect?.value || "";
      const showDetails = showDetailsToggle?.checked || false;
      const openSourceOnly = openSourceOnlyToggle?.checked || false;
      const sortBy = sortSelect?.value || "alphabetical";

      // Actualizar la URL con los parámetros de filtro
      updateUrlParams({
				searchTerm,
				selectedTag,
				showDetails,
				openSourceOnly,
        sortBy
			});

      // Dispatch custom event for the AppGrid to handle
      window.dispatchEvent(new CustomEvent("app-filter-change", {
        detail: {
          searchTerm,
          selectedTag,
          showDetails,
          openSourceOnly,
          sortBy
        }
      }));
    };

    // Add event listeners
    searchInput?.addEventListener("input", applyFilters);
    tagsSelect?.addEventListener("change", applyFilters);
    showDetailsToggle?.addEventListener("change", applyFilters);
    openSourceOnlyToggle?.addEventListener("change", applyFilters);
    sortSelect?.addEventListener("change", applyFilters);

    // Escuchar el evento cuando se selecciona una etiqueta
    window.addEventListener("app-tag-selected", (e: Event) => {
      const customEvent = e as CustomEvent;
      const tagId = customEvent.detail.tagId;

      if (tagsSelect && tagId) {
        // Establecer el valor del select
        tagsSelect.value = tagId;

        // Disparar el evento de cambio para aplicar el filtro
        tagsSelect.dispatchEvent(new Event("change"));
      }
    });

    // Aplicar filtros desde URL al cargar la página
    const url = new URL(window.location.href);

    // Aplicar filtro de etiqueta desde URL
    const urlTag = url.searchParams.get("tag");
    if (urlTag && tagsSelect) {
      tagsSelect.value = urlTag;
    }

    // Aplicar término de búsqueda desde URL
    const urlSearch = url.searchParams.get("search");
    if (urlSearch && searchInput) {
      searchInput.value = urlSearch;
    }

    // Aplicar mostrar detalles desde URL
    const urlDetails = url.searchParams.get("details");
    if (urlDetails === "true" && showDetailsToggle) {
      showDetailsToggle.checked = true;
    }

    // Aplicar filtro de código abierto desde URL
    const urlOpenSource = url.searchParams.get("opensource");
    if (urlOpenSource === "true" && openSourceOnlyToggle) {
      openSourceOnlyToggle.checked = true;
    }

    // Aplicar criterio de ordenación desde URL
    const urlSort = url.searchParams.get("sort");
    if (urlSort && sortSelect) {
      sortSelect.value = urlSort;
    }

    // Apply filters if any exists in URL
    if (urlTag || urlSearch || urlDetails || urlOpenSource || urlSort) {
      // Use requestAnimationFrame to ensure DOM is ready
      requestAnimationFrame(() => {
        applyFilters();
      });
    }
  });
</script>
