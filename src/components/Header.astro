---
import { type Lang, useTranslatedPath, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import {
	type AuthInfo,
	dropdownMenuItems,
	filterMenuItems,
	mainMenuItems,
} from "@/models/menu";
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";
import IconButton from "./IconButton.astro";
import Link from "./Link.astro";
import Logo from "./Logo.astro";
import Navigation from "./Navigation.astro";
import SearchButton from "./SearchButton.astro";
import ThemeToggle from "./ThemeToggle.astro";
import LocaleSelect from "./i18n/LocaleSelect.astro";

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

interface Props extends HTMLAttributes<"header"> {}
const { ...attrs } = Astro.props as Props;

let isLoggedIn = false;

try {
	const response = await fetch("/api/user", {
		headers: {
			cookie: Astro.request.headers.get("cookie") || "",
		},
	});
	const data = await response.json<{ isLoggedIn: boolean }>();
	isLoggedIn = data.isLoggedIn;
} catch (error) {
	console.error("Error fetching user:", error);
}

const filteredMainMenuItems = filterMenuItems(mainMenuItems);
const filteredDropdownMenuItems = filterMenuItems(dropdownMenuItems);

const authInfo: AuthInfo = {
	isLoggedIn,
	authPath: translatePath(isLoggedIn ? "/account" : "/signin"),
	authText: isLoggedIn ? "header.account" : "header.auth",
};
---

<header id="header"
 class={cn(
	"fixed top-0 left-0 w-full z-50 transition-all duration-300 ease-in-out",
	"border-b border-b-secondary-foreground-light transition-all duration-400 ease-in-out [transition-property:top,background-color,border-bottom-color]",
 )}
 {...attrs}
 >
    <div class="container mx-auto px-4 flex items-center h-20 relative">
      <div class="flex items-center mr-10">
        <IconButton
          class="md:hidden mr-4"
          id="mobile-menu-button"
          aria-label={t("header.menu")}
        >
          <Icon name="tabler:menu-2" class="size-6 text-main-light dark:text-main-dark" />
        </IconButton>

        <Logo />
      </div>
      <Navigation
        mainItems={filteredMainMenuItems}
        dropdownItems={filteredDropdownMenuItems}
        authInfo={authInfo}
      />

      <div class="flex items-center justify-center space-x-4 ml-auto">
        <SearchButton id="search-button" />
        <ThemeToggle />
				<LocaleSelect
					variant="text"
					class="hidden md:inline-flex"
				/>

        <Link href={translatePath(isLoggedIn ? "/account" : "/signin")} class="md:flex hidden">
          <span>{t(isLoggedIn ? "header.account" : "header.auth")}</span>
          <Icon name="tabler:chevron-right" class="size-5" />
        </Link>
      </div>
    </div>

  </header>

  <style>
    @reference "../styles/global.css";

    /* Header states */
    header {
      background-color: transparent;
      transform: translateY(0);
    }

    header.scrolled {
      @apply bg-bg-light dark:bg-bg-dark border-b border-section-border-light/12 dark:border-section-border-dark;
    }

    /* Alternative approach using CSS variables */
    header.scrolled #site-title,
    header.scrolled nav a,
    header.scrolled button:not(.bg-primary-light):not(.bg-primary-dark) {
      color: var(--colors-main-light);
    }

    :global(.dark) header.scrolled #site-title,
    :global(.dark) header.scrolled nav a,
    :global(.dark) header.scrolled button:not(.bg-primary-light):not(.bg-primary-dark) {
      color: var(--colors-main-dark);
    }

    header.scrolled nav a:hover {
      @apply text-secondary-foreground-light dark:text-secondary-foreground-dark;
    }

    header.hide {
      transform: translateY(-100%);
    }
  </style>

  <script>
    // Handle colored-hero classes for button styling
    const header = document.getElementById('header');
    const heroSection = document.querySelector('.hero-section');

    // Check if we're on a page with a colored hero
    if (heroSection && heroSection.classList.contains('colored-hero')) {
      document.body.classList.add('colored-hero');
    }

    // Header scroll behavior
    let lastScrollY = 0;

    const handleHeaderVisibility = () => {
      if (window.scrollY === 0) {
        header?.classList.remove("hide", "scrolled");
      } else if (window.scrollY > 50) {
        if (window.scrollY < lastScrollY) {
          header?.classList.remove("hide");
          header?.classList.add("scrolled");
        } else {
          header?.classList.add("hide");
        }
      }
      lastScrollY = window.scrollY;
    };

    // Initialize header state
    handleHeaderVisibility();

    // Use passive event listener for better performance
    window.addEventListener("scroll", handleHeaderVisibility, { passive: true });

    // Check if user is logged in on client-side as well
    async function checkUserStatus() {
      try {
        const response = await fetch('/api/user');
        const data = await response.json<{ isLoggedIn: boolean }>();

        // Get current language
        const currentLang = document.documentElement.lang || 'en';

        // Simple client-side path translation function
        const translatePath = (path: string) => {
          // Default language (en) doesn't need prefix
          if (currentLang === 'en') return path;
          // Other languages need prefix
          return `/${currentLang}${path}`;
        };

        // Update the auth button if needed
        if (data.isLoggedIn) {
          // Use a more robust selector that can find links with or without language prefix
          const signinPath = translatePath('/signin');
          const accountPath = translatePath('/account');

          // Find auth links - both with and without language prefix
          const authLinks = document.querySelectorAll(`a[href="${signinPath}"], a[href="/signin"]`);

          authLinks.forEach(link => {
            link.setAttribute('href', accountPath);
            const textSpan = link.querySelector('span');
            if (textSpan) {
              textSpan.textContent = currentLang === 'es' ? 'Cuenta' : 'Account';
            }
          });
        }
      } catch (error) {
        console.error("Error checking user status:", error);
      }
    }

    // Run on load
    checkUserStatus();
  </script>
