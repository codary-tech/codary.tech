---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";
import { type Lang, useTranslatedPath, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import { checkUserStatusClient } from "@/models/auth/user.service";
import {
	type AuthInfo,
	dropdownMenuItems,
	filterMenuItems,
	mainMenuItems,
} from "@/models/menu";
import AuthButton from "./AuthButton.astro";
import IconButton from "./IconButton.astro";
import LocaleSelect from "./i18n/LocaleSelect.astro";
import Logo from "./Logo.astro";
import Navigation from "./Navigation.astro";
import SearchButton from "./SearchButton.astro";
import ThemeToggle from "./ThemeToggle.astro";

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

interface Props extends HTMLAttributes<"header"> {}
const { ...attrs } = Astro.props as Props;

const isLoggedIn = await checkUserStatusClient();

const filteredMainMenuItems = filterMenuItems(mainMenuItems);
const filteredDropdownMenuItems = filterMenuItems(dropdownMenuItems);

const authInfo: AuthInfo = {
	isLoggedIn,
	authPath: translatePath(isLoggedIn ? "/account" : "/signin"),
	authText: isLoggedIn ? "header.account" : "header.auth",
};
---

<header
	id="header"
	class={cn(
  "fixed top-0 left-0 w-full z-50 border-b border-b-secondary-foreground-light",
  "transition-all duration-[400ms] ease-in-out [transition-property:top,background-color,border-bottom-color]",
)}
	{...attrs}
>
	<div class="container mx-auto px-4 flex items-center h-20 relative">
		<div class="flex items-center mr-10">
			<!-- Mobile menu button disabled for isolation -->
			<IconButton
				class="md:hidden mr-4"
				id="mobile-menu-button"
				aria-label={t("header.menu")}
			>
				<Icon
					name="tabler:menu-2"
					class="size-6 text-main-light dark:text-main-dark"
				/>
			</IconButton>

			<Logo />
		</div>
		<!-- Re-enabled Navigation for isolation testing -->
		<Navigation
			mainItems={filteredMainMenuItems}
			dropdownItems={filteredDropdownMenuItems}
			authInfo={authInfo}
		/>

		<div class="flex items-center justify-center space-x-4 ml-auto">
			<!-- Re-enabled ThemeToggle and LocaleSelect for testing -->
			<!-- <SearchButton id="search-button" /> -->
			<ThemeToggle />
			<LocaleSelect variant="text" class="hidden md:inline-flex" />

			<!-- Re-enabled AuthButton only for isolation testing -->
			<AuthButton />
		</div>
	</div>
</header>

<style>
	@reference "../styles/global.css";

	/* Header states */
	header {
		background-color: transparent;
		transform: translateY(0);
	}

	header.scrolled {
		@apply bg-bg-light dark:bg-bg-dark border-b border-section-border-light/12 dark:border-section-border-dark;
	}

	/* Alternative approach using CSS variables */
	header.scrolled #site-title,
	header.scrolled nav a,
	header.scrolled button:not(.bg-primary-light):not(.bg-primary-dark) {
		color: var(--colors-main-light);
	}

	:global(.dark) header.scrolled #site-title,
	:global(.dark) header.scrolled nav a,
	:global(.dark)
		header.scrolled
		button:not(.bg-primary-light):not(.bg-primary-dark) {
		color: var(--colors-main-dark);
	}

	header.scrolled nav a:hover {
		@apply text-secondary-foreground-light dark:text-secondary-foreground-dark;
	}

	header.hide {
		transform: translateY(-100%);
	}
</style>

<script>
	import { checkUserStatusClient } from "@/models/auth/user.service";

	// Handle colored-hero classes for button styling
	const header = document.getElementById("header");
	const heroSection = document.querySelector(".hero-section");

	// Check if we're on a page with a colored hero
	if (heroSection && heroSection.classList.contains("colored-hero")) {
		document.body.classList.add("colored-hero");
	}

	// Header scroll behavior (throttled)
	let lastScrollY = 0;
	let ticking = false;

	const handleHeaderVisibility = () => {
		if (!header) return;
		if (window.scrollY === 0) {
			header.classList.remove("hide", "scrolled");
		} else if (window.scrollY > 50) {
			if (window.scrollY < lastScrollY) {
				header.classList.remove("hide");
				header.classList.add("scrolled");
			} else {
				header.classList.add("hide");
			}
		}
		lastScrollY = window.scrollY;
	};

	// Throttle scroll handler to one per animation frame
	const onScroll = () => {
		if (!ticking) {
			ticking = true;
			requestAnimationFrame(() => {
				handleHeaderVisibility();
				ticking = false;
			});
		}
	};

	// Initialize header state
	handleHeaderVisibility();
	window.addEventListener("scroll", onScroll, { passive: true });

	// Check if user is logged in on client-side and notify other components.
	// We dispatch a CustomEvent so that `AuthButton` (or any other listener)
	// can react and update its UI. Do not manipulate DOM for AuthButton here.
	async function notifyAuthStateChange() {
		try {
			const isLoggedIn = await checkUserStatusClient();

			// Dispatch a neutral event that components can listen for.
			const ev = new CustomEvent("authStateChange", {
				detail: { isLoggedIn },
			});
			document.dispatchEvent(ev);
		} catch (error) {
			console.error("Error checking user status:", error);
		}
	}

	// Run on load
	notifyAuthStateChange();
</script>
